<?php

use {{model}};

class {{className}}{{classSuffix}} implements {{className}}Interface{{classSuffix}}
{
    
    /**
     * The data.
     *
     * @var {{model}}
     */
    protected $data;

    /**
     * The example variable cache for each related table template data
     * Uncomment the variable if you are going to use it
     * ---------------------------------------------------------------
     * The related column template data cache.
     * Make the data does not generated more than once.
     *
     * @var mixed
     */
    // protected $_relatedTable;

    /**
     * Set the data.
     *
     * @param {{model}} $data
     * @return void
     */
    public function setData({{model}} $data)
    {
        $this->data = $data;
    }
    {{methods}}

    /**
     * The example method each related table template data
     * Uncomment the method if you are going to use it
     * ---------------------------------------------------------------
     * The related column template data.
     *
     * @return mixed
     */
    // public function relatedTable()
    // {
    //     if ( ! is_null($this->data) and is_null($this->_relatedTable)) {
    //         if (isset($this->data->relatedTable)) {
    //             $this->_relatedTable = new relatedTable{{classSuffix}};
    //             $this->_relatedTable->setData($this->data->relatedTable);
    //         }
    //     }

    //     return $this->_relatedTable;
    // }

    /**
     * Create a new instance of the given template.
     *
     * @return {{className}}Template | static
     */
    public function newInstance()
    {
        // This method just provides a convenient way for us to generate fresh template
        // instances of this current template. It is particularly useful during the
        // hydration of new objects.
        return new static();
    }

}